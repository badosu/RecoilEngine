name: 'Build SpringRTS Engine'
description: 'Build the engine'
inputs:
  platform:
    description: 'Platform to build (e.g. "linux-64")'
    required: false
    default: 'windows-64'
  archtune-flags:
    description: 'Archtune flags'
    required: false
    default: ''
  buildtype:
    type: choice
    description: Build Type
    required: false
    options:
      - RELWITHDEBINFO
      - DEBUG
      - RELEASE
      - PROFILE
    default: 'RELWITHDEBINFO'
  buildtype-flags:
    description: 'Build Type Compilation Flags Override'
    required: false
    default: ''
  compilation-flags:
    description: 'Extra Compilation Flags'
    required: false
    default: ''
  use-cache:
    description: 'Use Cache'
    required: false
    default: 'true'
  strip-symbols:
    description: 'Strip debug symbols from artifacts'
    required: false
    default: 'true'
  build-configuration:
    description: 'Make only specified build configuration'
    required: false
    default: 'legacy'
  debug-tmate:
    description: 'Debug with tmate'
    required: false
    default: 'false'
  debug-ccache:
    description: 'Debug ccache'
    required: false
    default: 'true'
outputs:
  bin_name:
    description: 'Spring Binary Package Filename'
    value: ${{ steps.docker-run.outputs.bin_name }}
  dbg_name:
    description: 'Debug Package Filename'
    value: ${{ steps.docker-run.outputs.dbg_name }}
runs:
  using: 'composite'
  steps:
    - name: Cache ccache
      uses: actions/cache@v3
      if: ${{ inputs.use-cache == 'true' }}
      with:
        path: ${{ github.workspace }}/docker-build/cache/ccache
        key: ccache-${{ inputs.platform }}-${{ inputs.buildtype }}
        restore-keys: |
          ccache-${{ inputs.platform }}-
          ccache-

    - name: Cache Conan
      uses: actions/cache@v3
      if: ${{ inputs.use-cache == 'true' }}
      with:
        path: ${{ github.workspace }}/docker-build/cache/.conan
        key: conan-${{ inputs.platform }}

    - name: Build Docker image
      run: |
        '${{ github.workspace }}/docker-build/init_container.sh'
      shell: bash

    - name: Run Docker Build
      run: |
        # Image args
        BUILD_ARGS=(
          -p '${{ inputs.platform }}'
          -c '${{ inputs.archtune-flags }}'
          -t '${{ inputs.buildtype }}'
          -f '${{ inputs.compilation-flags }}'
          -o '${{ inputs.build-configuration }}'
        )

        if [ ! -z '${{ inputs.buildtype-flags }}' ]; then
          BUILD_ARGS+=(-r '${{ inputs.buildtype-flags }}')
        fi

        if [ '${{ inputs.debug-ccache }}' == 'true' ]; then
          BUILD_ARGS+=(-v '${{ github.workspace }}/ccache_dbg:/ccache_dbg' )
        fi

        if [ '${use-cache}' == 'true' ]; then
          BUILD_ARGS+=(-h 1)
        fi

        if [ '${{ inputs.debug-ccache }}' == 'true' ]; then
          BUILD_ARGS+=(-z 1)
        fi

        if [ '${{ inputs.strip-symbols }}' == 'true' ]; then
          BUILD_ARGS+=(-s 1)
        fi

        echo 'Running docker build with arguments: '${BUILD_ARGS[@]}''

        echo 'tmate-debug: ${{ inputs.debug-tmate }}'

        if [ '${{ inputs.debug-tmate }}' == 'pre' ]; then
          echo 'tmate debugging enabled. Skipping docker run command. Connect via SSH now...'
        else
          '${{ github.workspace }}/docker-build/build.sh' '${BUILD_ARGS[@]}'
        fi
      shell: bash
      id: docker-run

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ inputs.debug-tmate == 'pre' || inputs.debug-tmate == 'post' }}
